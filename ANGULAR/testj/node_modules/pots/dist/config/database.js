"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const realm_1 = __importDefault(require("realm"));
const models = __importStar(require("./models"));
const defaultDbOptions = {
    keepOpen: false,
};
const defaultFindAllOptions = {
    keepOpen: true,
};
class Database {
    _database = undefined;
    get database() {
        if (!this._database)
            this.open();
        return this._database;
    }
    open() {
        if (!process.argv[1].match("/bin/run$")) {
            const xdgDataHome = process.env.XDG_DATA_HOME || `${process.env.HOME}/.local/share`;
            const dataDir = `${xdgDataHome}/pots-data`;
            this._database = new realm_1.default({
                schema: Object.values(models),
                path: dataDir,
            });
        }
        else {
            this._database = new realm_1.default({
                schema: Object.values(models),
            });
        }
    }
    close() {
        this.database.close();
    }
    create(model, values, options) {
        this.database.write(() => {
            this.database.create(model, values);
        });
        if (!options.keepOpen)
            this.database.close();
    }
    findById(model, id, options) {
        const object = this.database.objectForPrimaryKey(model, id);
        if (!options.keepOpen)
            this.database.close();
        return object;
    }
    convertSortingDirection(string) {
        if (string === "asc")
            return false;
        else
            return true;
    }
    findAll(model, options) {
        let dbObject = this.database.objects(model);
        if (options.sortBy)
            dbObject = dbObject.sorted(options.sortBy.name, this.convertSortingDirection(options.sortBy.direction));
        const objectArr = [...dbObject];
        if (!options.keepOpen)
            this.database.close();
        return objectArr;
    }
    remove(object, options) {
        this.database.write(() => {
            this.database.delete(object);
        });
        if (!options.keepOpen)
            this.database.close();
    }
    edit(object, values, options) {
        this.database.write(() => {
            Object.keys(values).forEach((property) => {
                object[property] = values[property];
            });
        });
        if (!options.keepOpen)
            this.database.close();
    }
    generateSpecificFunctionsFor(model) {
        return {
            create: (values, options = defaultDbOptions) => {
                return this.create(model, values, options);
            },
            findById: (id, options = defaultDbOptions) => {
                return this.findById(model, id, options);
            },
            findAll: (passedOptions = defaultFindAllOptions) => {
                let options;
                if (model === "Transaction") {
                    const sortByDateOptions = {
                        sortBy: {
                            name: "date",
                            direction: "asc",
                        },
                    };
                    options = Object.assign({}, defaultFindAllOptions, sortByDateOptions, passedOptions);
                }
                else {
                    options = Object.assign({}, defaultFindAllOptions, passedOptions);
                }
                return this.findAll(model, options);
            },
            remove: (object, options = defaultDbOptions) => {
                return this.remove(object, options);
            },
            edit: (object, values, options = defaultDbOptions) => {
                return this.edit(object, values, options);
            },
        };
    }
    Pot = this.generateSpecificFunctionsFor("Pot");
    Transaction = this.generateSpecificFunctionsFor("Transaction");
}
const databaseIntance = new Database();
exports.default = databaseIntance;

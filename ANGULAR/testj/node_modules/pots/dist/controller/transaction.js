"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.remove = exports.edit = exports.list = exports.add = void 0;
const flag_1 = require("../flag");
const database_1 = __importDefault(require("../config/database"));
async function add(flags) {
    const isInteractive = !(!flags.date && flags.name && flags.pot && flags.amount);
    const name = await flag_1.Require.text({
        value: flags.name,
        prompt: "Transaction name?",
    });
    const amount = await flag_1.Require.number({
        value: flags.amount,
        prompt: "What amount?",
    });
    const pot = await flag_1.Require.pot({
        value: flags.pot,
    });
    const date = await flag_1.Require.date({
        value: flags.date,
        isInteractive,
        default: "today",
    }).then(dateString => dateString.date);
    database_1.default.Transaction.create({ name, amount, pot, date });
}
exports.add = add;
function list() {
    const transactions = database_1.default.Transaction.findAll();
    let outString = "";
    transactions.forEach((t) => {
        if (t.pot)
            outString += `"${t.name}" for ${t.amount} in "${t.pot.name}" on ${t.date}\n`;
        else
            outString += `"${t.name}" for ${t.amount} in "unknown pot" on ${t.date}\n`;
    });
    database_1.default.close();
    return outString;
}
exports.list = list;
async function edit(flags) {
    const name = flag_1.Optional.text({
        value: flags.name,
    });
    const amount = flag_1.Optional.number({
        value: flags.amount,
    });
    const pot = flag_1.Optional.pot({
        value: flags.pot,
    });
    const dateString = flag_1.Optional.date({
        value: flags.date,
    });
    const date = dateString !== null ? dateString.date : null;
    const changedValues = {};
    [
        { name },
        { amount },
        { pot },
        { date },
    ].forEach(obj => {
        const propertyName = Object.keys(obj)[0];
        const value = obj[propertyName];
        if (value !== null)
            changedValues[propertyName] = value;
    });
    if (Object.keys(changedValues).length === 0)
        throw new Error("No flags for values to be changed given\nSee --help for available flags");
    const transaction = await flag_1.Require.transaction({
        value: flags.name,
    });
    database_1.default.Transaction.edit(transaction, changedValues);
    return Object.keys(changedValues);
}
exports.edit = edit;
async function remove() {
    const transaction = await flag_1.Require.transaction({ value: undefined });
    const { name } = transaction;
    database_1.default.Transaction.remove(transaction);
    return name;
}
exports.remove = remove;

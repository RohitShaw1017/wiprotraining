"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const askFor = __importStar(require("../util/questions"));
const date_1 = require("../util/date");
const database_1 = __importDefault(require("../config/database"));
const util_1 = require("./util");
class Require {
    static async text(options) {
        const { value, prompt } = options;
        if (value)
            return value;
        else
            return askFor.text(prompt);
    }
    static async number(options) {
        const { value, prompt } = options;
        if (value)
            return Number.parseFloat(value);
        else
            return askFor.number(prompt);
    }
    static async date(options) {
        const { value, isInteractive, default: defaultVal } = options;
        if (value)
            return new date_1.DateString(value);
        else if (!isInteractive)
            return new date_1.DateString("today");
        else
            return askFor.date().then(ans => new date_1.DateString(ans));
    }
    static async pot(options) {
        const { value } = options;
        if (value) {
            return (0, util_1.findPot)(value);
        }
        else {
            const pots = database_1.default.Pot.findAll();
            const selected = await askFor.selectFromList({
                message: "Select a pot:",
                choices: [...pots]
                    .map((pot) => ({ name: pot.name, value: pot })),
                noun: "pot",
            });
            return selected;
        }
    }
    static async transaction(options, verb = null) {
        const { value } = options;
        const transactions = database_1.default.Transaction.findAll();
        const selected = await askFor.selectFromList({
            message: verb ? `Select a transaction to ${verb}:` : "Select a transaction:",
            choices: [...transactions]
                .map((trans) => ({ name: `"${trans.name}" for ${trans.amount} in "${trans.pot.name}"`, value: trans })),
            noun: "transaction",
        });
        return selected;
    }
}
exports.default = Require;

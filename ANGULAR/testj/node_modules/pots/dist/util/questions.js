"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renamingHelpText = exports.confirmation = exports.date = exports.text = exports.selectFromList = exports.renaming = exports.number = exports.dayOfTheWeek = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const date_1 = require("./date");
function handleOneOrZeroChoices(data) {
    const { choices, noun } = data;
    if (choices.length === 0) {
        const genericErrorMessage = "None to choose from. To create some use: NOUN add";
        const specificErrorMessage = `No ${noun}s found. To create some use: ${noun} add`;
        throw new Error(noun ? specificErrorMessage : genericErrorMessage);
    }
    else if (choices.length === 1) {
        const [choice] = choices;
        if (typeof choice === "string") {
            console.log(`Using ${choice}`);
            return choice;
        }
        else {
            console.log(`Using ${choice.name}`);
            return choice.value;
        }
    }
    else {
        return null;
    }
}
async function dayOfTheWeek(choices) {
    const choice = handleOneOrZeroChoices({ choices });
    if (choice !== null)
        return new Promise((resolve) => resolve(choice));
    else
        return inquirer_1.default.prompt([{
                type: "list",
                name: "dotw",
                message: "What day of the week?",
                choices,
            }]).then(ans => ans.dotw);
}
exports.dayOfTheWeek = dayOfTheWeek;
async function number(message, defaultVal) {
    return inquirer_1.default.prompt([{
            type: "string",
            name: "n",
            message,
            default: defaultVal,
            validate(input) {
                const valid = !isNaN(parseFloat(input));
                return valid || "Please enter a number";
            },
        }]).then(ans => parseFloat(ans.n));
}
exports.number = number;
async function renaming(defaultVal, message = "Please open your editor to rename") {
    return inquirer_1.default.prompt([{
            type: "editor",
            name: "updated",
            message,
            default: defaultVal,
        }]).then(ans => ans.updated.trim());
}
exports.renaming = renaming;
async function selectFromList(data) {
    const { message, choices, noun } = data;
    const choice = handleOneOrZeroChoices({ choices, noun });
    if (choice !== null)
        return choice;
    return inquirer_1.default.prompt([{
            type: "list",
            name: "select",
            message,
            choices,
        }]).then(ans => ans.select);
}
exports.selectFromList = selectFromList;
async function text(message) {
    return inquirer_1.default.prompt([{
            type: "input",
            name: "text",
            validate: input => !!input || "Can't be empty",
            message,
        }]).then(ans => ans.text.trim());
}
exports.text = text;
async function date(defaultVal = "today") {
    return inquirer_1.default.prompt([{
            type: "input",
            name: "date",
            message: "What date?",
            default: defaultVal,
            validate: input => (0, date_1.validateDateString)(input, true),
        }]).then(ans => ans.date);
}
exports.date = date;
async function confirmation(data) {
    return inquirer_1.default.prompt([{
            type: "confirm",
            name: "confirmation",
            message: data.message,
            default: data.default,
        }]).then(ans => ans.confirmation);
}
exports.confirmation = confirmation;
const renamingHelpText = (wording) => `It will ask you to ${wording} in your $EDITOR (in your case: ${process.env.EDITOR}).`;
exports.renamingHelpText = renamingHelpText;
